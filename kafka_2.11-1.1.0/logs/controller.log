[2020-04-13 23:01:58,183] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-13 23:01:58,187] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(student-0 -> Vector(0), passport-0 -> Vector(0), studentActivities-0 -> Vector(0), companyActivities-0 -> Vector(0), profile-0 -> Vector(0), company-0 -> Vector(0), response_topic-0 -> Vector(0), accounts-0 -> Vector(0), account-0 -> Vector(0))) (kafka.controller.KafkaController)
[2020-04-13 23:01:58,188] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-13 23:01:58,188] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-13 23:06:58,194] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-13 23:06:58,196] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(student-0 -> Vector(0), passport-0 -> Vector(0), studentActivities-0 -> Vector(0), companyActivities-0 -> Vector(0), profile-0 -> Vector(0), company-0 -> Vector(0), response_topic-0 -> Vector(0), accounts-0 -> Vector(0), account-0 -> Vector(0))) (kafka.controller.KafkaController)
[2020-04-13 23:06:58,196] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-13 23:06:58,196] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-13 23:11:58,201] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-13 23:11:58,207] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(student-0 -> Vector(0), passport-0 -> Vector(0), studentActivities-0 -> Vector(0), companyActivities-0 -> Vector(0), profile-0 -> Vector(0), company-0 -> Vector(0), response_topic-0 -> Vector(0), accounts-0 -> Vector(0), account-0 -> Vector(0))) (kafka.controller.KafkaController)
[2020-04-13 23:11:58,207] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-13 23:11:58,207] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-13 23:16:58,213] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-13 23:16:58,218] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(student-0 -> Vector(0), passport-0 -> Vector(0), studentActivities-0 -> Vector(0), companyActivities-0 -> Vector(0), profile-0 -> Vector(0), company-0 -> Vector(0), response_topic-0 -> Vector(0), accounts-0 -> Vector(0), account-0 -> Vector(0))) (kafka.controller.KafkaController)
[2020-04-13 23:16:58,219] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-13 23:16:58,219] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-13 23:21:58,224] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-13 23:21:58,225] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(student-0 -> Vector(0), passport-0 -> Vector(0), studentActivities-0 -> Vector(0), companyActivities-0 -> Vector(0), profile-0 -> Vector(0), company-0 -> Vector(0), response_topic-0 -> Vector(0), accounts-0 -> Vector(0), account-0 -> Vector(0))) (kafka.controller.KafkaController)
[2020-04-13 23:21:58,225] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-13 23:21:58,226] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-13 23:26:58,230] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-13 23:26:58,236] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(student-0 -> Vector(0), passport-0 -> Vector(0), studentActivities-0 -> Vector(0), companyActivities-0 -> Vector(0), profile-0 -> Vector(0), company-0 -> Vector(0), response_topic-0 -> Vector(0), accounts-0 -> Vector(0), account-0 -> Vector(0))) (kafka.controller.KafkaController)
[2020-04-13 23:26:58,236] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-13 23:26:58,236] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-13 23:31:58,240] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-13 23:31:58,246] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(student-0 -> Vector(0), passport-0 -> Vector(0), studentActivities-0 -> Vector(0), companyActivities-0 -> Vector(0), profile-0 -> Vector(0), company-0 -> Vector(0), response_topic-0 -> Vector(0), accounts-0 -> Vector(0), account-0 -> Vector(0))) (kafka.controller.KafkaController)
[2020-04-13 23:31:58,246] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-13 23:31:58,246] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-13 23:36:58,252] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-13 23:36:58,259] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(student-0 -> Vector(0), passport-0 -> Vector(0), studentActivities-0 -> Vector(0), companyActivities-0 -> Vector(0), profile-0 -> Vector(0), company-0 -> Vector(0), response_topic-0 -> Vector(0), accounts-0 -> Vector(0), account-0 -> Vector(0))) (kafka.controller.KafkaController)
[2020-04-13 23:36:58,260] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-13 23:36:58,260] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-13 23:41:58,266] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-13 23:41:58,272] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(student-0 -> Vector(0), passport-0 -> Vector(0), studentActivities-0 -> Vector(0), companyActivities-0 -> Vector(0), profile-0 -> Vector(0), company-0 -> Vector(0), response_topic-0 -> Vector(0), accounts-0 -> Vector(0), account-0 -> Vector(0))) (kafka.controller.KafkaController)
[2020-04-13 23:41:58,272] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-13 23:41:58,272] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-13 23:46:58,279] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-13 23:46:58,285] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(student-0 -> Vector(0), passport-0 -> Vector(0), studentActivities-0 -> Vector(0), companyActivities-0 -> Vector(0), profile-0 -> Vector(0), company-0 -> Vector(0), response_topic-0 -> Vector(0), accounts-0 -> Vector(0), account-0 -> Vector(0))) (kafka.controller.KafkaController)
[2020-04-13 23:46:58,285] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-13 23:46:58,285] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-13 23:49:31,805] DEBUG [Controller id=0] Delete topics listener fired for topics response_topic to be deleted (kafka.controller.KafkaController)
[2020-04-13 23:49:31,806] INFO [Controller id=0] Starting topic deletion for topics response_topic (kafka.controller.KafkaController)
[2020-04-13 23:49:31,811] INFO [Topic Deletion Manager 0], Handling deletion for topics response_topic (kafka.controller.TopicDeletionManager)
[2020-04-13 23:49:31,816] INFO [Topic Deletion Manager 0], Deletion of topic response_topic (re)started (kafka.controller.TopicDeletionManager)
[2020-04-13 23:49:31,817] INFO [Topic Deletion Manager 0], Topic deletion callback for response_topic (kafka.controller.TopicDeletionManager)
[2020-04-13 23:49:31,825] INFO [Topic Deletion Manager 0], Partition deletion callback for response_topic-0 (kafka.controller.TopicDeletionManager)
[2020-04-13 23:49:31,838] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-13 23:49:31,871] DEBUG The stop replica request (delete = true) sent to broker 0 is  (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-13 23:49:31,873] DEBUG The stop replica request (delete = false) sent to broker 0 is [Topic=response_topic,Partition=0,Replica=0] (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-13 23:49:31,878] DEBUG [Topic Deletion Manager 0], Deletion started for replicas [Topic=response_topic,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-04-13 23:49:31,880] DEBUG The stop replica request (delete = true) sent to broker 0 is [Topic=response_topic,Partition=0,Replica=0] (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-13 23:49:31,880] DEBUG The stop replica request (delete = false) sent to broker 0 is  (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-13 23:49:32,128] DEBUG [Controller id=0] Delete topic callback invoked for org.apache.kafka.common.requests.StopReplicaResponse@67fddf52 (kafka.controller.KafkaController)
[2020-04-13 23:49:32,139] DEBUG [Topic Deletion Manager 0], Deletion successfully completed for replicas [Topic=response_topic,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-04-13 23:49:32,141] INFO [Topic Deletion Manager 0], Handling deletion for topics response_topic (kafka.controller.TopicDeletionManager)
[2020-04-13 23:49:32,288] INFO [Topic Deletion Manager 0], Deletion of topic response_topic successfully completed (kafka.controller.TopicDeletionManager)
[2020-04-13 23:49:32,341] INFO [Controller id=0] New topics: [Set(response_topic)], deleted topics: [Set()], new partition replica assignment [Map(response_topic-0 -> Vector(0))] (kafka.controller.KafkaController)
[2020-04-13 23:49:32,341] INFO [Controller id=0] New partition creation callback for response_topic-0 (kafka.controller.KafkaController)
[2020-04-13 23:49:32,356] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-04-13 23:49:32,358] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-04-13 23:50:54,286] DEBUG [Controller id=0] Delete topics listener fired for topics response_topic to be deleted (kafka.controller.KafkaController)
[2020-04-13 23:50:54,286] INFO [Controller id=0] Starting topic deletion for topics response_topic (kafka.controller.KafkaController)
[2020-04-13 23:50:54,286] INFO [Topic Deletion Manager 0], Handling deletion for topics response_topic (kafka.controller.TopicDeletionManager)
[2020-04-13 23:50:54,287] INFO [Topic Deletion Manager 0], Deletion of topic response_topic (re)started (kafka.controller.TopicDeletionManager)
[2020-04-13 23:50:54,287] INFO [Topic Deletion Manager 0], Topic deletion callback for response_topic (kafka.controller.TopicDeletionManager)
[2020-04-13 23:50:54,287] INFO [Topic Deletion Manager 0], Partition deletion callback for response_topic-0 (kafka.controller.TopicDeletionManager)
[2020-04-13 23:50:54,290] DEBUG The stop replica request (delete = true) sent to broker 0 is  (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-13 23:50:54,290] DEBUG The stop replica request (delete = false) sent to broker 0 is [Topic=response_topic,Partition=0,Replica=0] (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-13 23:50:54,290] DEBUG [Topic Deletion Manager 0], Deletion started for replicas [Topic=response_topic,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-04-13 23:50:54,290] DEBUG The stop replica request (delete = true) sent to broker 0 is [Topic=response_topic,Partition=0,Replica=0] (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-13 23:50:54,291] DEBUG The stop replica request (delete = false) sent to broker 0 is  (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-13 23:50:54,309] DEBUG [Controller id=0] Delete topic callback invoked for org.apache.kafka.common.requests.StopReplicaResponse@7c06d65 (kafka.controller.KafkaController)
[2020-04-13 23:50:54,309] DEBUG [Topic Deletion Manager 0], Deletion successfully completed for replicas [Topic=response_topic,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-04-13 23:50:54,310] INFO [Topic Deletion Manager 0], Handling deletion for topics response_topic (kafka.controller.TopicDeletionManager)
[2020-04-13 23:50:54,319] INFO [Topic Deletion Manager 0], Deletion of topic response_topic successfully completed (kafka.controller.TopicDeletionManager)
[2020-04-13 23:50:54,320] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-04-13 23:50:54,320] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-04-13 23:50:54,344] INFO [Controller id=0] New topics: [Set(response_topic)], deleted topics: [Set()], new partition replica assignment [Map(response_topic-0 -> Vector(0))] (kafka.controller.KafkaController)
[2020-04-13 23:50:54,344] INFO [Controller id=0] New partition creation callback for response_topic-0 (kafka.controller.KafkaController)
[2020-04-13 23:51:23,622] DEBUG [Controller id=0] Delete topics listener fired for topics response_topic to be deleted (kafka.controller.KafkaController)
[2020-04-13 23:51:23,622] INFO [Controller id=0] Starting topic deletion for topics response_topic (kafka.controller.KafkaController)
[2020-04-13 23:51:23,622] INFO [Topic Deletion Manager 0], Handling deletion for topics response_topic (kafka.controller.TopicDeletionManager)
[2020-04-13 23:51:23,622] INFO [Topic Deletion Manager 0], Deletion of topic response_topic (re)started (kafka.controller.TopicDeletionManager)
[2020-04-13 23:51:23,622] INFO [Topic Deletion Manager 0], Topic deletion callback for response_topic (kafka.controller.TopicDeletionManager)
[2020-04-13 23:51:23,624] INFO [Topic Deletion Manager 0], Partition deletion callback for response_topic-0 (kafka.controller.TopicDeletionManager)
[2020-04-13 23:51:23,636] DEBUG The stop replica request (delete = true) sent to broker 0 is  (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-13 23:51:23,636] DEBUG The stop replica request (delete = false) sent to broker 0 is [Topic=response_topic,Partition=0,Replica=0] (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-13 23:51:23,636] DEBUG [Topic Deletion Manager 0], Deletion started for replicas [Topic=response_topic,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-04-13 23:51:23,636] DEBUG The stop replica request (delete = true) sent to broker 0 is [Topic=response_topic,Partition=0,Replica=0] (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-13 23:51:23,636] DEBUG The stop replica request (delete = false) sent to broker 0 is  (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-13 23:51:23,655] DEBUG [Controller id=0] Delete topic callback invoked for org.apache.kafka.common.requests.StopReplicaResponse@35296d2c (kafka.controller.KafkaController)
[2020-04-13 23:51:23,655] DEBUG [Topic Deletion Manager 0], Deletion successfully completed for replicas [Topic=response_topic,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-04-13 23:51:23,656] INFO [Topic Deletion Manager 0], Handling deletion for topics response_topic (kafka.controller.TopicDeletionManager)
[2020-04-13 23:51:23,700] INFO [Topic Deletion Manager 0], Deletion of topic response_topic successfully completed (kafka.controller.TopicDeletionManager)
[2020-04-13 23:51:23,701] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-04-13 23:51:23,702] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-04-13 23:51:23,725] INFO [Controller id=0] New topics: [Set(response_topic)], deleted topics: [Set()], new partition replica assignment [Map(response_topic-0 -> Vector(0))] (kafka.controller.KafkaController)
[2020-04-13 23:51:23,725] INFO [Controller id=0] New partition creation callback for response_topic-0 (kafka.controller.KafkaController)
[2020-04-13 23:51:58,293] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-13 23:51:58,293] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(passport-0 -> Vector(0), student-0 -> Vector(0), studentActivities-0 -> Vector(0), companyActivities-0 -> Vector(0), company-0 -> Vector(0), profile-0 -> Vector(0), accounts-0 -> Vector(0), response_topic-0 -> Vector(0), account-0 -> Vector(0))) (kafka.controller.KafkaController)
[2020-04-13 23:51:58,293] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-13 23:51:58,293] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-13 23:53:07,531] INFO [Controller id=0] New topics: [Set(response_topic_amazon)], deleted topics: [Set()], new partition replica assignment [Map(response_topic_amazon-0 -> Vector(0))] (kafka.controller.KafkaController)
[2020-04-13 23:53:07,532] INFO [Controller id=0] New partition creation callback for response_topic_amazon-0 (kafka.controller.KafkaController)
